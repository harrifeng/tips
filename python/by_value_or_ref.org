* python 函数传递的方式, 其实和JAVA中是一样的.其实都是传入的一个object的reference
  + 如果是一个基本类型,比如int, 传入的是object的ref,那么函数就会自动创建一个ref
    的拷贝,无论如何你都无法对基本类型进行扩展(因为基本类型是immutable的,你把ref的
    拷贝赋新值旧意味着地址改变),所有对基本类型的改动其实都是让这个
    拷贝的指针指向新的地址. 
    #+begin_src python
      def try_to_change_int(int_num):
          """
          
          Arguments:
          - `int_num`:
          """
          print 'got', int_num
          int_num = 23
          print 'changed to ', int_num
      
      out_num = 11
      print 'before, out_num is ', out_num
      try_to_change_int(out_num)
      print 'after, out_num is ', out_num
      
      # Output:
      # <==================================================================
      # before, out_num is  11
      # got 11
      # changed to  23
      # after, out_num is  11
      # ==================================================================>
    #+end_src
  + 在python中,字符串和tuple其实也是immutabled(虽然它们大小可变,但是一旦确定了也就
    无法扩展了)所以可见对于字符串(或者tuple),任何改动它的操作都会引出一个新的内存地址, 
    这些改变在函数外肯定是不起作用的.
    #+begin_src python
      def try_to_change_tuple(tt = ('a', 'b', 'c')):
          """
          
          Arguments:
          - `tt`:
          """
          print 'got ', tt
          # (1,2,3) and (a,b,c) ('f','h','r') are different parts of memory
          tt = ('1', '2', '3')
          print 'changed to', tt
      
      
      aa = ('f', 'h', 'r')
      print 'before aa is', aa
      try_to_change_tuple(aa)
      print 'after aa is', aa
      
      # Output:
      # <==================================================================
      # before aa is ('f', 'h', 'r')
      # got  ('f', 'h', 'r')
      # changed to ('1', '2', '3')
      # after aa is ('f', 'h', 'r')
      # ==================================================================>
    #+end_src
  + 我们先试图更个一个传入函数的list, 因为传入的是outer_list的引用, 所以我们可以
    更改list的ref的拷贝的值,并且在函数外更改也一样有效. (这是因为list是mutable的,
    可以做到一个list的内容改变了, 但是其内存地址并不改变)
    #+begin_src python
      def try_to_change_list_contests(the_list):
          """
          
          Arguments:
          - `the_list`:
          """
          print 'got', the_list
          the_list.append('four')
          print 'changed to', the_list
      
      outer_list = ['one', 'two', 'three']
      print 'before, outer_list = ', outer_list
      try_to_change_list_contests(outer_list)
      print 'after, outer_list =', outer_list
      
      # Output:
      # <==================================================================
      # before, outer_list =  ['one', 'two', 'three']
      # got ['one', 'two', 'three']
      # changed to ['one', 'two', 'three', 'four']
      # after, outer_list = ['one', 'two', 'three', 'four']
      # ==================================================================>
    #+end_src
  + 因为the_list是值传递,所以the_list其实就是就是outer_list的引用的一个拷贝,
    这里我们把the_list指向了一个新的list, 但是我们没法改变outer_list指向哪里
    #+begin_src python
      def try_to_change_list_reference(the_list):
          """
          
          Arguments:
          - `the_list`:
          """
          print 'got', the_list
          the_list = ['and', 'we', 'can', 'not', 'lie']
          print 'set to', the_list
      
      outer_list = ['we', 'like', 'proper', 'English']
      
      print 'before, outer_list =', outer_list
      try_to_change_list_reference(outer_list)
      print 'after, outer_list =', outer_list
      
      # Output:
      # <==================================================================
      # before, outer_list = ['we', 'like', 'proper', 'English']
      # got ['we', 'like', 'proper', 'English']
      # set to ['and', 'we', 'can', 'not', 'lie']
      # after, outer_list = ['we', 'like', 'proper', 'English']
      # ==================================================================>
    #+end_src



